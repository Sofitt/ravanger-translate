#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import json

def apply_translation_to_module(module_path: str, translations: dict):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∫ –º–æ–¥—É–ª—é"""
    
    with open(module_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    updated_content = content
    applied_count = 0
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–∞—Ä—ã old/new –∏ –∑–∞–º–µ–Ω—è–µ–º
    def replace_translation(match):
        nonlocal applied_count
        comment = match.group(1)
        old_text = match.group(2)
        current_new = match.group(3)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        if old_text in translations and translations[old_text].strip():
            applied_count += 1
            return f'    # {comment}\n    old "{old_text}"\n    new "{translations[old_text]}"'
        else:
            return match.group(0)
    
    pattern = r'    # ([^\n]+)\n    old "([^"]+)"\n    new "([^"]*)"'
    updated_content = re.sub(pattern, replace_translation, updated_content)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(module_path, 'w', encoding='utf-8') as f:
        f.write(updated_content)
    
    return applied_count

def create_translation_template():
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑"""
    
    common_translations = {
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        "Android": "Android",
        "Demo": "–î–µ–º–æ",
        "Patreon": "Patreon", 
        "Public": "–ü—É–±–ª–∏—á–Ω–∞—è",
        "Test": "–¢–µ—Å—Ç",
        
        # –û–±—â–∏–µ –∏–≥—Ä–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
        "Yes": "–î–∞",
        "No": "–ù–µ—Ç",
        "Continue": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        "Back": "–ù–∞–∑–∞–¥",
        "Next": "–î–∞–ª–µ–µ",
        "Save": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        "Load": "–ó–∞–≥—Ä—É–∑–∏—Ç—å",
        "Settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "Options": "–û–ø—Ü–∏–∏",
        "Gallery": "–ì–∞–ª–µ—Ä–µ—è",
        "Credits": "–¢–∏—Ç—Ä—ã",
        "Quit": "–í—ã—Ö–æ–¥",
        
        # –ß–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
        "Dragon": "–î—Ä–∞–∫–æ–Ω",
        "Princess": "–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞",
        "King": "–ö–æ—Ä–æ–ª—å",
        "Queen": "–ö–æ—Ä–æ–ª–µ–≤–∞",
        "Knight": "–†—ã—Ü–∞—Ä—å",
        "Castle": "–ó–∞–º–æ–∫",
        "Village": "–î–µ—Ä–µ–≤–Ω—è",
        "Forest": "–õ–µ—Å",
        "Mountain": "–ì–æ—Ä–∞",
        "Cave": "–ü–µ—â–µ—Ä–∞",
        
        # –≠–º–æ—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
        "Happy": "–°—á–∞—Å—Ç–ª–∏–≤—ã–π",
        "Sad": "–ì—Ä—É—Å—Ç–Ω—ã–π",
        "Angry": "–ó–ª–æ–π",
        "Surprised": "–£–¥–∏–≤–ª–µ–Ω–Ω—ã–π",
        "Attack": "–ê—Ç–∞–∫–æ–≤–∞—Ç—å",
        "Defend": "–ó–∞—â–∏—â–∞—Ç—å—Å—è",
        "Run": "–ë–µ–∂–∞—Ç—å",
        "Hide": "–ü—Ä—è—Ç–∞—Ç—å—Å—è",
        "Talk": "–ì–æ–≤–æ—Ä–∏—Ç—å",
        "Listen": "–°–ª—É—à–∞—Ç—å"
    }
    
    template_file = "common_translations.json"
    with open(template_file, 'w', encoding='utf-8') as f:
        json.dump(common_translations, f, ensure_ascii=False, indent=2)
    
    print(f"–°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {template_file}")
    return template_file

def quick_translate_simple_modules():
    """–ë—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ—Å—Ç—ã–µ –º–æ–¥—É–ª–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    template_file = "common_translations.json"
    if not os.path.exists(template_file):
        create_translation_template()
    
    with open(template_file, 'r', encoding='utf-8') as f:
        common_translations = json.load(f)
    
    modules_dir = "translation_modules"
    simple_modules = ["options_ru.rpy", "screens_ru.rpy"]
    
    total_applied = 0
    
    for module_name in simple_modules:
        module_path = os.path.join(modules_dir, module_name)
        if os.path.exists(module_path):
            print(f"–ü—Ä–∏–º–µ–Ω—è—é –ø–µ—Ä–µ–≤–æ–¥—ã –∫ {module_name}...")
            applied = apply_translation_to_module(module_path, common_translations)
            total_applied += applied
            print(f"  –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {applied}")
    
    print(f"\n–í—Å–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_applied}")

def create_translation_workflow():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤"""
    
    workflow_file = "TRANSLATION_WORKFLOW.md"
    with open(workflow_file, 'w', encoding='utf-8') as f:
        f.write("""# –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ Ravager

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
```
translation_modules/          # –ú–æ–¥—É–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
‚îú‚îÄ‚îÄ c1_ru.rpy                # –ì–ª–∞–≤–∞ 1 (236 —Å—Ç—Ä–æ–∫)
‚îú‚îÄ‚îÄ options_ru.rpy           # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (6 —Å—Ç—Ä–æ–∫) ‚≠ê –ù–ê–ß–ê–¢–¨ –ó–î–ï–°–¨
‚îú‚îÄ‚îÄ screens_ru.rpy           # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å (99 —Å—Ç—Ä–æ–∫)
‚îî‚îÄ‚îÄ ...
```

### 2. –§–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
```renpy
translate ru strings:

    # c1.rpy:123
    old "Hello, world!"
    new "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"        # ‚Üê –í–ê–®–ê –ó–ê–î–ê–ß–ê: –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ
```

## üìã –ü–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å

### –®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫:
1. `options_ru.rpy` (6 —Å—Ç—Ä–æ–∫) - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
2. `screens_ru.rpy` (99 —Å—Ç—Ä–æ–∫) - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å  
3. `c1_ru.rpy` (236 —Å—Ç—Ä–æ–∫) - –ø–µ—Ä–≤–∞—è –≥–ª–∞–≤–∞
4. `c2_*_ru.rpy` - –≤—Ç–æ—Ä–∞—è –≥–ª–∞–≤–∞
5. –ò —Ç–∞–∫ –¥–∞–ª–µ–µ...

### –®–∞–≥ 2: –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–¥—É–ª—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
```bash
# –ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è
nano translation_modules/options_ru.rpy
```

### –®–∞–≥ 3: –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏
- –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É `new ""`
- –í—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞–≤—ã—á–∫–∞–º–∏: `new "–í–∞—à –ø–µ—Ä–µ–≤–æ–¥"`
- –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª

### –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –≤ –∏–≥—Ä–µ
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ `_translations/tl/ru/`
- –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

## üéØ –°–æ–≤–µ—Ç—ã –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É

### ‚úÖ –•–æ—Ä–æ—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:
- **–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å—Ç–∏–ª—å**: —Ñ—ç–Ω—Ç–µ–∑–∏, —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ
- **–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å**: –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
- **–ö–æ–Ω—Ç–µ–∫—Å—Ç**: —á–∏—Ç–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫
- **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**: –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –≤ –∏–≥—Ä–µ

### ‚ùå –ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å:
- –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ `{color}`, `{b}`, `{i}`
- –ù–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫
- –ù–µ –¥–µ–ª–∞–π—Ç–µ —Å—Ç—Ä–æ–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

## üõ†Ô∏è –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

### –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å:
```bash
python3 translation_helper.py
```

### –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã:
```bash
python3 apply_translations.py
```

### –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è —Ä–∞–±–æ—Ç—ã:
```bash
# –°–æ–∑–¥–∞–µ—Ç sample_[module].txt —Å –ø–µ—Ä–≤—ã–º–∏ 10 —Å—Ç—Ä–æ–∫–∞–º–∏
python3 translation_helper.py
```

## üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

–í–µ–¥–∏—Ç–µ —É—á–µ—Ç –≤ —Ñ–∞–π–ª–µ `translation_progress.json`:
```json
{
  "options_ru.rpy": {
    "completed": true,
    "translator": "–í–∞—à–µ –∏–º—è",
    "date": "2024-10-08"
  }
}
```

## üéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –≤ `_translations/tl/ru/`
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É
3. –í–∫–ª—é—á–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Ren'Py
2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–∞–≤—ã—á–∫–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ

---
**–£–¥–∞—á–∏ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ! üéØ**
""")
    
    print(f"–°–æ–∑–¥–∞–Ω–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: {workflow_file}")

def main():
    print("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    create_translation_template()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    create_translation_workflow()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    print("\nüöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
    quick_translate_simple_modules()
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:")
    print("  - translation_work_plan.md - –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã")
    print("  - TRANSLATION_WORKFLOW.md - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤")
    print("  - common_translations.json - —à–∞–±–ª–æ–Ω –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
    print("  - translation_modules/ - –º–æ–¥—É–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")

if __name__ == "__main__":
    main()
