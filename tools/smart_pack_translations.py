#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import json
from typing import Dict, List, Tuple, Optional

class SmartTranslationPacker:
    def __init__(self):
        self.existing_translations = {}  # {key: (value, source_file, line_num)}
        self.new_translations = {}       # {key: (value, source_file, comment)}

    def parse_translation_file(self, file_path: str) -> Dict[str, Tuple[str, str, str]]:
        """–ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        translations = {}

        if not os.path.exists(file_path):
            return translations

        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–ª–æ–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        pattern = r'    # ([^\n]+)\n    old "([^"]+)"\n    new "([^"]*)"'
        matches = re.findall(pattern, content)

        for comment, old_text, new_text in matches:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            normalized_key = old_text.strip().strip("'\"")

            # –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç
            if normalized_key in translations:
                print(f"  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {old_text}")
                continue

            translations[normalized_key] = (new_text, file_path, comment, old_text)

        return translations

    def load_existing_translations(self, translations_dir: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üîç –ó–∞–≥—Ä—É–∂–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã...")

        if not os.path.exists(translations_dir):
            print(f"–ü–∞–ø–∫–∞ {translations_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        for filename in os.listdir(translations_dir):
            if filename.endswith('.rpy'):
                file_path = os.path.join(translations_dir, filename)
                file_translations = self.parse_translation_file(file_path)

                for key, (value, source, comment, original_key) in file_translations.items():
                    if key in self.existing_translations:
                        print(f"‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω: {key} –≤ {filename}")
                    else:
                        self.existing_translations[key] = (value, filename, comment, original_key)

                print(f"  üìÑ {filename}: {len(file_translations)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤")

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.existing_translations)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤")

    def load_new_translations(self, modules_dir: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ –º–æ–¥—É–ª–µ–π"""
        print("üÜï –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã...")

        if not os.path.exists(modules_dir):
            print(f"–ü–∞–ø–∫–∞ {modules_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        for filename in os.listdir(modules_dir):
            if filename.endswith('_ru.rpy'):
                file_path = os.path.join(modules_dir, filename)
                file_translations = self.parse_translation_file(file_path)

                for key, (value, source, comment, original_key) in file_translations.items():
                    self.new_translations[key] = (value, filename, comment, original_key)

                print(f"  üìÑ {filename}: {len(file_translations)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤")

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.new_translations)} –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤")

    def merge_translations(self) -> Dict[str, Tuple[str, str, str]]:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:
        - –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –ø—É—Å—Ç–æ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
        - –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π, –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π
        - –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ –±—ã–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        - –ï—Å–ª–∏ –∏—Ç–æ–≥–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –ø—É—Å—Ç–æ–π, –∑–∞–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        """
        print("üîÑ –û–±—ä–µ–¥–∏–Ω—è—é –ø–µ—Ä–µ–≤–æ–¥—ã...")

        merged = {}
        stats = {
            'kept_old': 0,          # –û—Å—Ç–∞–≤–∏–ª–∏ —Å—Ç–∞—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥
            'updated': 0,           # –û–±–Ω–æ–≤–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥
            'added_new': 0,         # –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π
            'duplicates': 0,        # –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            'filled_original': 0    # –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
        }

        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        for key, (value, source, comment, original_key) in self.existing_translations.items():
            merged[key] = (value, source, comment, original_key)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        for key, (new_value, new_source, new_comment, new_original_key) in self.new_translations.items():
            if key in merged:
                old_value, old_source, old_comment, old_original_key = merged[key]
                stats['duplicates'] += 1

                if new_value.strip():  # –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
                    merged[key] = (new_value, new_source, new_comment, new_original_key)
                    stats['updated'] += 1
                    print(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {key[:50]}... -> {new_value[:30]}...")
                else:  # –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –ø—É—Å—Ç–æ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
                    stats['kept_old'] += 1
                    print(f"  ‚è∏Ô∏è  –û—Å—Ç–∞–≤–ª–µ–Ω: {key[:50]}... = {old_value[:30]}...")
            else:
                # –ù–æ–≤—ã–π –∫–ª—é—á
                merged[key] = (new_value, new_source, new_comment, new_original_key)
                stats['added_new'] += 1

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        for key, (value, source, comment, original_key) in list(merged.items()):
            if not value.strip():  # –ü–µ—Ä–µ–≤–æ–¥ –ø—É—Å—Ç–æ–π
                merged[key] = (key, source, comment, original_key)
                stats['filled_original'] += 1

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:")
        print(f"  üÜï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {stats['added_new']}")
        print(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}")
        print(f"  ‚è∏Ô∏è  –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö: {stats['kept_old']}")
        print(f"  üîç –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {stats['duplicates']}")
        print(f"  üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º: {stats['filled_original']}")
        print(f"  üìä –ò—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {len(merged)}")

        return merged

    def group_by_source_file(self, translations: Dict[str, Tuple[str, str, str]]) -> Dict[str, List]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º"""
        grouped = {}

        for key, (value, source, comment, original_key) in translations.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if source.endswith('_ru.rpy'):
                target_file = source.replace('_ru.rpy', '.rpy')
            else:
                target_file = source

            if target_file not in grouped:
                grouped[target_file] = []

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø–∏—Å–∏
            grouped[target_file].append((original_key, value, comment))

        return grouped

    def write_translation_file(self, file_path: str, translations: List[Tuple[str, str, str]]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞"""
        base_name = os.path.basename(file_path).replace('.rpy', '')

        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(f"# –ü–µ—Ä–µ–≤–æ–¥ —Ñ–∞–π–ª–∞ {base_name}.rpy\n")
            f.write(f"# –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(translations)}\n\n")
            f.write("translate ru strings:\n\n")

            for key, value, comment in sorted(translations):
                f.write(f"    # {comment}\n")
                f.write(f'    old "{key}"\n')
                f.write(f'    new "{value}"\n\n')

    def pack_to_game(self, output_dir: str):
        """–£–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –∏–≥—Ä—É"""
        print(f"üì¶ –£–ø–∞–∫–æ–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ {output_dir}...")

        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
        os.makedirs(output_dir, exist_ok=True)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        merged_translations = self.merge_translations()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
        grouped = self.group_by_source_file(merged_translations)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for target_file, translations in grouped.items():
            output_path = os.path.join(output_dir, target_file)
            self.write_translation_file(output_path, translations)
            print(f"  ‚úÖ {target_file}: {len(translations)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤")

        print(f"üéâ –£–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ {len(grouped)} —Ñ–∞–π–ª–æ–≤")

        return len(grouped), len(merged_translations)

def main():
    packer = SmartTranslationPacker()

    # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    print("üîß –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
    translation_archives = ["../game/Translations.rpa", "../game/translations.rpa"]
    for archive in translation_archives:
        if os.path.exists(archive):
            disabled_name = archive + ".disabled"
            if not os.path.exists(disabled_name):
                os.rename(archive, disabled_name)
                print(f"  ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω: {archive} -> {disabled_name}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ _translations
    packer.load_existing_translations("../_translations/tl/ru")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ –º–æ–¥—É–ª–µ–π
    packer.load_new_translations("../translation_modules")

    # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ –∏–≥—Ä—É
    files_count, translations_count = packer.pack_to_game("../game/tl/ru")

    print(f"\nüéØ –ì–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
    print(f"   –§–∞–π–ª–æ–≤: {files_count}")
    print(f"   –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {translations_count}")
    print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
    print(f"   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
    print(f"\nüí° –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤:")
    print(f"   mv __test__/Translations.rpa.disabled game/Translations.rpa")

if __name__ == "__main__":
    main()
