#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ .rpy —Ñ–∞–π–ª—ã
"""

import os
import re
import json
import argparse
from typing import Dict, List, Tuple


class TranslationApplicator:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ JSON –≤ .rpy —Ñ–∞–π–ª—ã"""
    
    def __init__(self):
        self.stats = {
            "total": 0,
            "applied": 0,
            "skipped_empty": 0,
            "skipped_exists": 0,
            "errors": 0
        }
    
    def load_json(self, json_file: str) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"""
        
        with open(json_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def load_rpy(self, rpy_file: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .rpy —Ñ–∞–π–ª–∞"""
        
        with open(rpy_file, 'r', encoding='utf-8') as f:
            return f.read()
    
    def save_rpy(self, rpy_file: str, content: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ .rpy —Ñ–∞–π–ª"""
        
        with open(rpy_file, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def create_translations_map(self, strings: List[Dict]) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –æ—Ä–∏–≥–∏–Ω–∞–ª -> –ø–µ—Ä–µ–≤–æ–¥"""
        
        translations_map = {}
        
        for string_obj in strings:
            original = string_obj["original"]
            translation = string_obj.get("translation", "").strip()
            
            if translation:
                translations_map[original] = translation
        
        return translations_map
    
    def apply_translations(self, rpy_content: str, translations_map: Dict[str, str]) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É .rpy —Ñ–∞–π–ª–∞"""
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
        pattern = r'(    # [^\n]+\n    old "([^"]+)"\n    new ")([^"]*)(")'
        
        def replace_translation(match):
            full_match = match.group(0)
            prefix = match.group(1)
            old_text = match.group(2)
            current_translation = match.group(3)
            suffix = match.group(4)
            
            self.stats["total"] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
            if old_text in translations_map:
                new_translation = translations_map[old_text]
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ –ø—É—Å—Ç–æ–π - –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π
                if not current_translation.strip():
                    self.stats["applied"] += 1
                    return f'{prefix}{new_translation}{suffix}'
                else:
                    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –ø–æ –∂–µ–ª–∞–Ω–∏—é)
                    self.stats["skipped_exists"] += 1
                    return full_match
            else:
                # –ù–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                if not current_translation.strip():
                    self.stats["skipped_empty"] += 1
                return full_match
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
        new_content = re.sub(pattern, replace_translation, rpy_content)
        
        return new_content
    
    def apply_json_to_rpy(self, json_file: str, rpy_file: str, output_file: str = None):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ JSON –≤ .rpy —Ñ–∞–π–ª"""
        
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é JSON: {json_file}")
        data = self.load_json(json_file)
        
        metadata = data.get("metadata", {})
        strings = data.get("strings", [])
        
        print(f"üìä –ú–æ–¥—É–ª—å: {metadata.get('module', 'unknown')}")
        print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ JSON: {len(strings)}")
        print(f"üìä –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ JSON: {metadata.get('translated', 0)}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        translations_map = self.create_translations_map(strings)
        print(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: {len(translations_map)}")
        print()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º .rpy —Ñ–∞–π–ª
        if not os.path.exists(rpy_file):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {rpy_file}")
            return
        
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é .rpy: {rpy_file}")
        rpy_content = self.load_rpy(rpy_file)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        print(f"üîÑ –ü—Ä–∏–º–µ–Ω—è—é –ø–µ—Ä–µ–≤–æ–¥—ã...")
        new_content = self.apply_translations(rpy_content, translations_map)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output = output_file or rpy_file
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤: {output}")
        self.save_rpy(output, new_content)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:")
        print(f"  üìù –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: {self.stats['total']}")
        print(f"  ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: {self.stats['applied']}")
        print(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ): {self.stats['skipped_exists']}")
        print(f"  ‚è∏Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞): {self.stats['skipped_empty']}")
        
        if self.stats["errors"] > 0:
            print(f"  ‚ùå –û—à–∏–±–∫–∏: {self.stats['errors']}")
    
    def apply_batch(self, json_dir: str, rpy_dir: str, output_dir: str = None):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ –ø–∞–∫–µ—Ç–∞ JSON —Ñ–∞–π–ª–æ–≤"""
        
        import glob
        
        json_files = glob.glob(os.path.join(json_dir, "*.json"))
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: {len(json_files)}")
        print()
        
        for json_file in json_files:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π .rpy —Ñ–∞–π–ª
            json_basename = os.path.basename(json_file)
            # –£–±–∏—Ä–∞–µ–º _translated –µ—Å–ª–∏ –µ—Å—Ç—å
            json_basename = json_basename.replace('_translated.json', '.json')
            basename = json_basename.replace('.json', '.rpy')
            rpy_file = os.path.join(rpy_dir, basename)
            
            if not os.path.exists(rpy_file):
                print(f"‚ö†Ô∏è  .rpy —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {basename}, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            if output_dir:
                if not os.path.exists(output_dir):
                    os.makedirs(output_dir)
                output_file = os.path.join(output_dir, basename)
            else:
                output_file = rpy_file  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π
            
            print(f"{'='*60}")
            self.apply_json_to_rpy(json_file, rpy_file, output_file)
            print()
            
            # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
            self.stats = {
                "total": 0,
                "applied": 0,
                "skipped_empty": 0,
                "skipped_exists": 0,
                "errors": 0
            }


def main():
    parser = argparse.ArgumentParser(description="–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ JSON –≤ .rpy")
    parser.add_argument("--input", help="–í—Ö–æ–¥–Ω–æ–π JSON —Ñ–∞–π–ª")
    parser.add_argument("--module", help="–¶–µ–ª–µ–≤–æ–π .rpy —Ñ–∞–π–ª –º–æ–¥—É–ª—è")
    parser.add_argument("--output", help="–í—ã—Ö–æ–¥–Ω–æ–π .rpy —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    parser.add_argument("--batch-json", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å JSON —Ñ–∞–π–ª–∞–º–∏ (–ø–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º)")
    parser.add_argument("--batch-rpy", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å .rpy —Ñ–∞–π–ª–∞–º–∏ (–ø–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º)")
    parser.add_argument("--batch-output", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö .rpy (–ø–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º)")
    
    args = parser.parse_args()
    
    applicator = TranslationApplicator()
    
    if args.batch_json and args.batch_rpy:
        # –ü–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º
        print("üöÄ –†–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print(f"üìÅ JSON –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {args.batch_json}")
        print(f"üìÅ .rpy –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {args.batch_rpy}")
        if args.batch_output:
            print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {args.batch_output}")
        else:
            print(f"‚ö†Ô∏è  –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã!")
        print()
        
        applicator.apply_batch(args.batch_json, args.batch_rpy, args.batch_output)
        
    elif args.input and args.module:
        # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        applicator.apply_json_to_rpy(args.input, args.module, args.output)
        
    else:
        # –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –∏–∑ temp_files/llm_json
        json_dir = "../temp_files/llm_json"
        rpy_dir = "../translation_modules"
        
        print("üöÄ –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
        print(f"üìÅ JSON –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {json_dir}")
        print(f"üìÅ .rpy –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {rpy_dir}")
        print(f"‚ö†Ô∏è  –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã!")
        print()
        
        applicator.apply_batch(json_dir, rpy_dir)
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ!")


if __name__ == "__main__":
    main()
