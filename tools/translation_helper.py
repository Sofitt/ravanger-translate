#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import json
from typing import Dict, List, Tuple

class TranslationHelper:
    def __init__(self, modules_dir="../translation_modules"):
        self.modules_dir = modules_dir
        self.progress_file = "translation_progress.json"
        self.load_progress()
    
    def load_progress(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞"""
        if os.path.exists(self.progress_file):
            with open(self.progress_file, 'r', encoding='utf-8') as f:
                self.progress = json.load(f)
        else:
            self.progress = {}
    
    def save_progress(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞"""
        with open(self.progress_file, 'w', encoding='utf-8') as f:
            json.dump(self.progress, f, ensure_ascii=False, indent=2)
    
    def get_module_stats(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥—É–ª—è–º"""
        stats = {}
        
        for filename in os.listdir(self.modules_dir):
            if filename.endswith('_ru.rpy'):
                filepath = os.path.join(self.modules_dir, filename)
                
                total_strings = 0
                translated_strings = 0
                
                with open(filepath, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
                old_matches = re.findall(r'old "([^"]*)"', content)
                new_matches = re.findall(r'new "([^"]*)"', content)
                
                total_strings = len(old_matches)
                translated_strings = sum(1 for new in new_matches if new.strip())
                
                completion = (translated_strings / total_strings * 100) if total_strings > 0 else 0
                
                stats[filename] = {
                    'total': total_strings,
                    'translated': translated_strings,
                    'completion': completion,
                    'size_mb': os.path.getsize(filepath) / 1024 / 1024
                }
        
        return stats
    
    def create_work_plan(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É"""
        stats = self.get_module_stats()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        high_priority = []  # –û—Å–Ω–æ–≤–Ω–æ–π —Å—é–∂–µ—Ç
        medium_priority = []  # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        low_priority = []  # –û—Å—Ç–∞–ª—å–Ω–æ–µ
        
        for filename, data in stats.items():
            if any(chapter in filename for chapter in ['c1_', 'c2_', 'c3_', 'c4_', 'c5_', 'c6_']):
                high_priority.append((filename, data))
            elif any(ui in filename for ui in ['screens_', 'options_', 'gallery_']):
                medium_priority.append((filename, data))
            else:
                low_priority.append((filename, data))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–º–µ–Ω—å—à–∏–µ —Ñ–∞–π–ª—ã —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
        high_priority.sort(key=lambda x: x[1]['total'])
        medium_priority.sort(key=lambda x: x[1]['total'])
        low_priority.sort(key=lambda x: x[1]['total'])
        
        plan_file = "translation_work_plan.md"
        with open(plan_file, 'w', encoding='utf-8') as f:
            f.write("# –ü–ª–∞–Ω —Ä–∞–±–æ—Ç—ã –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É Ravager\n\n")
            
            f.write("## üéØ –≠—Ç–∞–ø 1: –û—Å–Ω–æ–≤–Ω–æ–π —Å—é–∂–µ—Ç (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)\n\n")
            total_high = 0
            for filename, data in high_priority:
                f.write(f"- [ ] **{filename}** - {data['total']} —Å—Ç—Ä–æ–∫ ({data['completion']:.1f}% –≥–æ—Ç–æ–≤–æ)\n")
                total_high += data['total']
            
            f.write(f"\n**–ò—Ç–æ–≥–æ —ç—Ç–∞–ø 1:** {total_high} —Å—Ç—Ä–æ–∫\n\n")
            
            f.write("## üéÆ –≠—Ç–∞–ø 2: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)\n\n")
            total_medium = 0
            for filename, data in medium_priority:
                f.write(f"- [ ] **{filename}** - {data['total']} —Å—Ç—Ä–æ–∫ ({data['completion']:.1f}% –≥–æ—Ç–æ–≤–æ)\n")
                total_medium += data['total']
            
            f.write(f"\n**–ò—Ç–æ–≥–æ —ç—Ç–∞–ø 2:** {total_medium} —Å—Ç—Ä–æ–∫\n\n")
            
            f.write("## üìö –≠—Ç–∞–ø 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)\n\n")
            total_low = 0
            for filename, data in low_priority:
                f.write(f"- [ ] **{filename}** - {data['total']} —Å—Ç—Ä–æ–∫ ({data['completion']:.1f}% –≥–æ—Ç–æ–≤–æ)\n")
                total_low += data['total']
            
            f.write(f"\n**–ò—Ç–æ–≥–æ —ç—Ç–∞–ø 3:** {total_low} —Å—Ç—Ä–æ–∫\n\n")
            
            f.write("## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
            f.write(f"- **–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π:** {len(stats)}\n")
            f.write(f"- **–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫:** {total_high + total_medium + total_low}\n")
            f.write(f"- **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫:** —Å–Ω–∞—á–∞–ª–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n")
            
            f.write("## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
            f.write("1. **–ù–∞—á–Ω–∏—Ç–µ —Å —Ñ–∞–π–ª–æ–≤ c1_ru.rpy, c2_*.rpy** - —ç—Ç–æ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã\n")
            f.write("2. **–ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –ø–æ 50-100 —Å—Ç—Ä–æ–∫ –∑–∞ —Ä–∞–∑** –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\n")
            f.write("3. **–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –≤ –∏–≥—Ä–µ** –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è\n")
            f.write("4. **–í–µ–¥–∏—Ç–µ –≥–ª–æ—Å—Å–∞—Ä–∏–π** –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–æ–≤\n")
        
        print(f"–ü–ª–∞–Ω —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω: {plan_file}")
        return plan_file
    

def main():
    helper = TranslationHelper()
    
    print("üéØ –ê–Ω–∞–ª–∏–∑ –º–æ–¥—É–ª–µ–π –ø–µ—Ä–µ–≤–æ–¥–∞...")
    stats = helper.get_module_stats()
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(stats)}")
    total_strings = sum(s['total'] for s in stats.values())
    total_translated = sum(s['translated'] for s in stats.values())
    overall_progress = (total_translated / total_strings * 100) if total_strings > 0 else 0
    
    print(f"üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {total_translated}/{total_strings} ({overall_progress:.1f}%)")
    
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–∞–±–æ—Ç—ã...")
    plan_file = helper.create_work_plan()
    
    print("\nüéØ –¢–æ–ø-5 –º–æ–¥—É–ª–µ–π –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:")
    sorted_modules = sorted(stats.items(), key=lambda x: x[1]['total'])
    for filename, data in sorted_modules[:5]:
        print(f"  {filename}: {data['total']} —Å—Ç—Ä–æ–∫")
    
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª {plan_file} –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.")

if __name__ == "__main__":
    main()
