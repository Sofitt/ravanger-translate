#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import glob

def is_dialogue_string(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∏–∞–ª–æ–≥–æ–º –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    text = text.strip()
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ
    if not text or len(text) < 2:
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤/—á–∏—Å–µ–ª
    if not any(c.isalpha() for c in text):
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
    if any(pattern in text.lower() for pattern in [
        'renpy', 'config.', 'persistent.', 'gui.', '.rpy', '.rpyc',
        'what_suffix', 'who_suffix', 'what_prefix', 'who_prefix',
        'nvl_', 'adv_', 'ctc_', 'cps_', 'cpspt'
    ]):
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∫–æ–¥
    if re.match(r'^[a-z_]+\s*[=<>!]+', text):
        return False
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –≤ _() —Ñ—É–Ω–∫—Ü–∏–∏
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–∏–ø–∞ "FFFFFF" - –∏—Å–∫–ª—é—á–∞–µ–º
    if re.match(r'^[A-F0-9]+$', text):
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    if re.match(r'^(if|elif|else|and|or|not)\s+', text):
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
    if text.count('_') > len(text) * 0.3:
        return False
    
    return True

def extract_dialogue_from_file(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ .rpy —Ñ–∞–π–ª–∞"""
    dialogues = []
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
    except:
        return dialogues
    
    lines = content.split('\n')
    
    for i, line in enumerate(lines):
        original_line = line
        line = line.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not line or line.startswith('#'):
            continue
        
        quote_matches = []
        
        # 1. –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ _() - —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏ Ren'Py
        # –ü—Ä–∏–º–µ—Ä—ã: _("Gore"), _("Rape"), _("Some text")
        for match in re.finditer(r'_\("([^"\\]*(?:\\.[^"\\]*)*)"\)', line):
            text = match.group(1)
            quote_matches.append((text, 'translate_function'))
        
        for match in re.finditer(r"_\('([^'\\]*(?:\\.[^'\\]*)*)'\)", line):
            text = match.group(1)
            quote_matches.append((text, 'translate_function'))
        
        # 2. –ò—â–µ–º –æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        # –î–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        for match in re.finditer(r'"([^"\\]*(?:\\.[^"\\]*)*)"', line):
            text = match.group(1)
            if not line.startswith('_'):  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º _() —Å—Ç—Ä–æ–∫–∏
                quote_matches.append((text, 'regular'))
        
        # –û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        for match in re.finditer(r"'([^'\\]*(?:\\.[^'\\]*)*)'", line):
            text = match.group(1)
            if not line.startswith('_'):
                quote_matches.append((text, 'regular'))
        
        for text, source_type in quote_matches:
            if is_dialogue_string(text):
                context_line = original_line.strip()
                
                # –î–ª—è _() —Ñ—É–Ω–∫—Ü–∏–π –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º (—ç—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã)
                if source_type == 'translate_function':
                    context = f"{os.path.basename(file_path)}:{i+1}"
                    dialogues.append((text.strip(), context))
                    continue
                
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                is_character_dialogue = (
                    # –ü—Ä—è–º–æ–π –¥–∏–∞–ª–æ–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    re.match(r'^\s*\w+\s+"', context_line) or
                    # –î–∏–∞–ª–æ–≥ –Ω–∞—Ä—Ä–∞—Ç–æ—Ä–∞
                    re.match(r'^\s*"', context_line) or
                    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    'centered' in context_line or
                    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–æ–≤
                    context_line.strip().startswith('"') and len(context_line.strip()) > 10
                )
                
                if is_character_dialogue:
                    context = f"{os.path.basename(file_path)}:{i+1}"
                    dialogues.append((text.strip(), context))
    
    return dialogues

def extract_all_dialogue():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –≤—Å–µ—Ö .rpy —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫...")
    
    all_dialogues = {}
    
    # –ò—â–µ–º –≤—Å–µ .rpy —Ñ–∞–π–ª—ã –≤ extracted_scripts
    script_files = glob.glob('extracted_scripts/*.rpy')
    
    total_files = len(script_files)
    for idx, file_path in enumerate(script_files, 1):
        print(f"  [{idx}/{total_files}] {os.path.basename(file_path)}", end='\r')
        
        dialogues = extract_dialogue_from_file(file_path)
        
        for text, context in dialogues:
            if text not in all_dialogues:
                all_dialogues[text] = []
            all_dialogues[text].append(context)
    
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {len(all_dialogues)}")
    
    return all_dialogues

def save_dialogue_keys(dialogues, output_file):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª—é—á–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª"""
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("# –î–∏–∞–ª–æ–≥–∏ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥—Ä—ã Ravager –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n")
        f.write(f"# –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {len(dialogues)}\n")
        f.write("# –§–æ—Ä–º–∞—Ç: Ren'Py translation format\n\n")
        f.write("translate ru strings:\n\n")
        
        for text in sorted(dialogues.keys()):
            contexts = dialogues[text]
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
            context_list = ', '.join(contexts[:5])
            if len(contexts) > 5:
                context_list += f" (+{len(contexts)-5} more)"
            
            f.write(f"    # {context_list}\n")
            f.write(f'    old "{text}"\n')
            f.write(f'    new ""\n\n')
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_file}")

if __name__ == "__main__":
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
    dialogues = extract_all_dialogue()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    save_dialogue_keys(dialogues, "temp_files/dialogue_keys_new.txt")
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ!")
