#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re

def split_translation_file():
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ –º–æ–¥—É–ª–∏ –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º"""
    
    input_file = "../temp_files/dialogue_keys.txt"
    output_dir = "../translation_modules"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥—É–ª–µ–π
    os.makedirs(output_dir, exist_ok=True)
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Ñ–∞–π–ª–∞–º
    file_groups = {}
    current_entry = None
    
    with open(input_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        
        # –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
        if line.startswith('# ') and '.rpy:' in line:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            file_match = re.search(r'(\w+\.rpy):', line)
            if file_match:
                source_file = file_match.group(1)
                
                # –ß–∏—Ç–∞–µ–º old —Å—Ç—Ä–æ–∫—É
                if i + 1 < len(lines) and lines[i + 1].strip().startswith('old '):
                    old_line = lines[i + 1].strip()
                    
                    # –ß–∏—Ç–∞–µ–º new —Å—Ç—Ä–æ–∫—É
                    if i + 2 < len(lines) and lines[i + 2].strip().startswith('new '):
                        new_line = lines[i + 2].strip()
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
                        if source_file not in file_groups:
                            file_groups[source_file] = []
                        
                        file_groups[source_file].append({
                            'comment': line,
                            'old': old_line,
                            'new': new_line
                        })
                        
                        i += 3
                        continue
        
        i += 1
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    for source_file, entries in file_groups.items():
        module_name = source_file.replace('.rpy', '_ru.rpy')
        output_path = os.path.join(output_dir, module_name)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(f"# –ü–µ—Ä–µ–≤–æ–¥ —Ñ–∞–π–ª–∞ {source_file}\n")
            f.write(f"# –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(entries)}\n\n")
            f.write("translate ru strings:\n\n")
            
            for entry in entries:
                f.write(f"    {entry['comment']}\n")
                f.write(f"    {entry['old']}\n")
                f.write(f"    {entry['new']}\n\n")
        
        print(f"–°–æ–∑–¥–∞–Ω –º–æ–¥—É–ª—å {module_name}: {len(entries)} —Å—Ç—Ä–æ–∫")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    with open(os.path.join(output_dir, "README.md"), 'w', encoding='utf-8') as f:
        f.write("# –ú–æ–¥—É–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ Ravager\n\n")
        f.write("## –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:\n\n")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority_order = [
            'c1.rpy', 'c2_highlands.rpy', 'c2_lowlands.rpy', 'c2_mountains.rpy', 'c2_world.rpy',
            'c3_captives.rpy', 'c3_captures.rpy', 'c3_dreams.rpy', 'c3_hordes.rpy', 'c3_lair.rpy',
            'c4.rpy', 'c4_abbey.rpy', 'c4_capital.rpy', 'c4_cove.rpy', 'c4_farms.rpy', 'c4_fort.rpy',
            'c4_swamp.rpy', 'c4_town.rpy', 'c4_waifu.rpy', 'c4_wildlands.rpy',
            'c5.rpy', 'c5_court.rpy', 'c5_dream.rpy', 'c5_forces.rpy', 'c5_harem.rpy', 'c5_herald.rpy',
            'c6.rpy', 'c6_court.rpy', 'c6_forces.rpy', 'c6_harem.rpy', 'c6_herald.rpy',
            'screens.rpy', 'options.rpy', 'gallery.rpy'
        ]
        
        f.write("### üéØ –û—Å–Ω–æ–≤–Ω–æ–π —Å—é–∂–µ—Ç (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):\n")
        for file_name in priority_order[:15]:  # –ü–µ—Ä–≤—ã–µ 15 —Ñ–∞–π–ª–æ–≤
            if file_name in file_groups:
                count = len(file_groups[file_name])
                f.write(f"- `{file_name.replace('.rpy', '_ru.rpy')}` - {count} —Å—Ç—Ä–æ–∫\n")
        
        f.write("\n### üéÆ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n")
        for file_name in priority_order[15:]:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
            if file_name in file_groups:
                count = len(file_groups[file_name])
                f.write(f"- `{file_name.replace('.rpy', '_ru.rpy')}` - {count} —Å—Ç—Ä–æ–∫\n")
        
        f.write(f"\n**–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π:** {len(file_groups)}\n")
        f.write(f"**–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫:** {sum(len(entries) for entries in file_groups.values())}\n")
    
    print(f"\n–ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ {len(file_groups)} –º–æ–¥—É–ª–µ–π –≤ –ø–∞–ø–∫–µ '{output_dir}'")
    return output_dir

if __name__ == "__main__":
    split_translation_file()
