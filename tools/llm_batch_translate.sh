#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ LLM (—Ä–µ–∂–∏–º CLI –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./llm_batch_translate.sh [--prepare-only] [--translate-only] [--pack-only] [--skip-backup]

set -e  # –û—Å—Ç–∞–Ω–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã)
API_URL="${LLM_API_URL:-http://127.0.0.1:11434/api/chat}"  # URL API Ollama –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
BACKEND="${LLM_BACKEND:-ollama}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ollama –∫–∞–∫ –±—ç–∫–µ–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MODEL="${LLM_MODEL:-saiga}"  # –ò–º—è –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Ollama
BATCH_SIZE="${LLM_BATCH_SIZE:-5}"  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
MAX_RETRIES="${LLM_MAX_RETRIES:-3}"  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
TEMPERATURE="${LLM_TEMPERATURE:-0.1}"  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-1.0)
TOP_P="${LLM_TOP_P:-0.7}"  # Top-p sampling (0.0-1.0)
MODULES_DIR="../translation_modules"
SOURCE_DIR="../extracted_scripts"  # –ò—Å—Ö–æ–¥–Ω—ã–µ .rpy —Ñ–∞–π–ª—ã –¥–ª—è v2
JSON_DIR="../temp_files/llm_json_v2"
BACKUP_DIR="../temp_files/backups"
CHARACTER_MAP="../data/characters.json"  # –ö–∞—Ä—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –ø–æ–ª–æ–º

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏
print_header() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤
select_files_cli() {
    print_header "üìÅ –í—ã–±–æ—Ä –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"

    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ (–≤—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ):"
    echo ""

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .rpy —Ñ–∞–π–ª–æ–≤ –∏–∑ extracted_scripts
    files=()
    index=1

    for file in "$SOURCE_DIR"/*.rpy; do
        if [ -f "$file" ]; then
            files+=("$file")
            file_name=$(basename "$file")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–µ—Ä–µ–≤–æ–¥
            local json_file="$JSON_DIR/${file_name%.rpy}.json"
            local translated_file="$JSON_DIR/${file_name%.rpy}_translated.json"
            local status=""

            if [ -f "$translated_file" ]; then
                status="${GREEN}[‚úì –ü–µ—Ä–µ–≤–µ–¥–µ–Ω]${NC}"
            elif [ -f "$json_file" ]; then
                status="${YELLOW}[‚óã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω]${NC}"
            else
                status="${BLUE}[  –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω]${NC}"
            fi

            echo -e "  ${BLUE}[$index]${NC} $file_name $status"
            index=$((index + 1))
        fi
    done

    echo ""
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${YELLOW}–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: ${#files[@]}${NC}"
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
    echo "–õ–µ–≥–µ–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:"
    echo -e "  ${GREEN}[‚úì –ü–µ—Ä–µ–≤–µ–¥–µ–Ω]${NC}     - –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω"
    echo -e "  ${YELLOW}[‚óã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω]${NC}   - JSON —Å–æ–∑–¥–∞–Ω, –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–≤–æ–¥—É"
    echo -e "  ${BLUE}[  –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω]${NC} - –µ—â–µ –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω"
    echo ""
    echo "–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞:"
    echo "  - –ù–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 3 5)"
    echo "  - –î–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-5)"
    echo "  - 'all' –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"
    echo "  - 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    echo ""
    echo -e "${GREEN}–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≤–≤–µ—Ä—Ö ‚Üë —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫${NC}"
    echo ""
    read -p "–í–∞—à –≤—ã–±–æ—Ä: " choice

    if [ "$choice" = "q" ]; then
        echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
        exit 0
    fi

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
    SELECTED_FILES=()

    if [ "$choice" = "all" ]; then
        SELECTED_FILES=("${files[@]}")
    elif [[ "$choice" =~ ^[0-9]+-[0-9]+$ ]]; then
        # –î–∏–∞–ø–∞–∑–æ–Ω
        local start=$(echo "$choice" | cut -d'-' -f1)
        local end=$(echo "$choice" | cut -d'-' -f2)

        for ((i=start; i<=end; i++)); do
            if [ $i -ge 1 ] && [ $i -le ${#files[@]} ]; then
                SELECTED_FILES+=("${files[$((i-1))]}")
            fi
        done
    else
        # –û—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        for num in $choice; do
            if [ $num -ge 1 ] && [ $num -le ${#files[@]} ]; then
                SELECTED_FILES+=("${files[$((num-1))]}")
            fi
        done
    fi

    if [ ${#SELECTED_FILES[@]} -eq 0 ]; then
        print_error "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
        exit 1
    fi

    echo ""
    print_success "–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${#SELECTED_FILES[@]}"
    for file in "${SELECTED_FILES[@]}"; do
        echo "  - $(basename "$file")"
    done
    echo ""
}

# –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
backup_modules() {
    print_header "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"

    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_PATH="${BACKUP_DIR}/backup_${TIMESTAMP}"

    mkdir -p "$BACKUP_PATH"

    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ game/tl/ru/
    if [ -d "../game/tl/ru" ]; then
        cp -r "../game/tl/ru" "$BACKUP_PATH/" 2>/dev/null || true
        print_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_PATH"
    else
        print_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ../game/tl/ru –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
    fi
}

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è JSON —Å –∏—Å—Ö–æ–¥–Ω—ã–º .rpy —Ñ–∞–π–ª–æ–º
sync_json_with_source() {
    local source_file="$1"
    local json_file="$2"

    print_warning "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: $(basename "$json_file")"

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –∏–∑ .rpy
    local temp_json="${json_file}.temp"
    python3 llm_translate_prepare_v2.py \
        --source "$source_file" \
        --output "$temp_json" \
        --character-map "$CHARACTER_MAP" >/dev/null 2>&1

    if [ ! -f "$temp_json" ]; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"
        return 1
    fi

    # –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JSON –µ—Å—Ç—å, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
    if [ -f "$json_file" ]; then
        python3 - <<EOF
import json
import sys

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–∞ —Ñ–∞–π–ª–∞
with open('$temp_json', 'r', encoding='utf-8') as f:
    new_data = json.load(f)

with open('$json_file', 'r', encoding='utf-8') as f:
    existing_data = json.load(f)

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫ –ø–æ original
existing_originals = {}
for item in existing_data.get('strings', []):
    original = item.get('original', '')
    existing_originals[original] = item

# –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
result_strings = list(existing_data.get('strings', []))
added_count = 0

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ñ–∞–π–ª–µ
for new_item in new_data.get('strings', []):
    original = new_item.get('original', '')
    if original not in existing_originals:
        result_strings.append(new_item)
        added_count += 1

# –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
metadata = existing_data.get('metadata', {})
metadata['total_strings'] = len(result_strings)
if added_count > 0:
    metadata['last_sync'] = new_data.get('metadata', {}).get('source_path', '')

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
output = {
    'metadata': metadata,
    'strings': result_strings
}

with open('$json_file', 'w', encoding='utf-8') as f:
    json.dump(output, f, ensure_ascii=False, indent=2)

if added_count > 0:
    print(f"  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫: {added_count}")
else:
    print(f"  ‚úì –ù–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

sys.exit(0)
EOF
    else
        # –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
        mv "$temp_json" "$json_file"
        print_success "  ‚úì –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π JSON"
    fi

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    rm -f "$temp_json"
}

# –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
prepare_modules() {
    print_header "–®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"

    mkdir -p "$JSON_DIR"

    if [ ${#SELECTED_FILES[@]} -gt 0 ]; then
        # CLI —Ä–µ–∂–∏–º: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file in "${SELECTED_FILES[@]}"; do
            file_base=$(basename "$file" .rpy)
            echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: $file_base"
            python3 llm_translate_prepare_v2.py \
                --source "$file" \
                --output "$JSON_DIR/${file_base}.json" \
                --character-map "$CHARACTER_MAP"
        done
    else
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        python3 llm_translate_prepare_v2.py \
            --batch "$SOURCE_DIR" \
            --batch-output "$JSON_DIR" \
            --character-map "$CHARACTER_MAP"
    fi

    print_success "–ú–æ–¥—É–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã"
}

# –®–∞–≥ 2: –ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ LLM
translate_modules() {
    print_header "–®–∞–≥ 2: –ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ LLM"

    echo "API URL: $API_URL"
    echo "Model: $MODEL"
    echo "Temperature: $TEMPERATURE"
    echo ""

    # –°—á–µ—Ç—á–∏–∫–∏
    total=0
    success=0
    failed=0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    files_to_process=()

    if [ ${#SELECTED_FILES[@]} -gt 0 ]; then
        # CLI —Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file in "${SELECTED_FILES[@]}"; do
            local file_base=$(basename "$file" .rpy)
            local json_file="$JSON_DIR/${file_base}.json"

            # –ï—Å–ª–∏ JSON –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if [ ! -f "$json_file" ]; then
                print_warning "JSON –Ω–µ –Ω–∞–π–¥–µ–Ω: $json_file"
                echo "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞..."
                python3 llm_translate_prepare_v2.py \
                    --source "$file" \
                    --output "$json_file" \
                    --character-map "$CHARACTER_MAP"
            fi

            if [ -f "$json_file" ]; then
                files_to_process+=("$json_file")
            else
                print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å: $file_base"
            fi
        done
    else
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –≤—Å–µ JSON —Ñ–∞–π–ª—ã
        for json_file in "$JSON_DIR"/*.json; do
            if [ -f "$json_file" ]; then
                files_to_process+=("$json_file")
            fi
        done
    fi

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    for input_file in "${files_to_process[@]}"; do
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        file_base=$(basename "$input_file" .json)
        if [[ "$file_base" == *"_translated" ]]; then
            continue
        fi

        output_file="${JSON_DIR}/${file_base}_translated.json"

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è JSON —Å –∏—Å—Ö–æ–¥–Ω—ã–º .rpy —Ñ–∞–π–ª–æ–º (–≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω)
        source_rpy="${SOURCE_DIR}/${file_base}.rpy"
        if [ -f "$source_rpy" ]; then
            # –ï—Å–ª–∏ —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º _translated.json –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ input
            if [ -f "$output_file" ]; then
                sync_json_with_source "$source_rpy" "$output_file"
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º _translated.json –∫–∞–∫ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
                input_file="$output_file"
            else
                sync_json_with_source "$source_rpy" "$input_file"
            fi
        else
            print_warning "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $source_rpy (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é)"
        fi

        total=$((total + 1))

        echo ""
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "–ü–µ—Ä–µ–≤–æ–¥ –º–æ–¥—É–ª—è: $file_base"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        echo -e "${BLUE}–ü–µ—Ä–µ–≤–æ–¥ $input_file...${NC}"
        echo -e "${YELLOW}–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:${NC}"
        echo "  Backend: $BACKEND"
        echo "  API URL: $API_URL"
        echo "  Model: $MODEL"
        echo "  Temperature: $TEMPERATURE"
        echo "  Top-p: $TOP_P"

        if python3 llm_translate.py \
            --input "$input_file" \
            --output "$output_file" \
            --backend "$BACKEND" \
            --api-url "$API_URL" \
            --model "$MODEL" \
            --batch-size "$BATCH_SIZE" \
            --max-retries "$MAX_RETRIES" \
            --temperature "$TEMPERATURE" \
            --top-p "$TOP_P"; then

            success=$((success + 1))
            print_success "–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω: $file_base"
        else
            failed=$((failed + 1))
            print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: $file_base"
        fi
    done

    echo ""
    print_header "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"
    echo "–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: $total"
    print_success "–£—Å–ø–µ—à–Ω–æ: $success"
    if [ $failed -gt 0 ]; then
        print_error "–û—à–∏–±–∫–∏: $failed"
    fi
}

# –®–∞–≥ 3: –£–ø–∞–∫–æ–≤–∫–∞ –≤ –∏–≥—Ä—É (–≤–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é JSON->RPY –∏ —É–ø–∞–∫–æ–≤–∫—É –≤ game/tl/ru)
pack_translations() {
    print_header "–®–∞–≥ 3: –£–ø–∞–∫–æ–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –∏–≥—Ä—É"

    python3 smart_pack_translations.py

    print_success "–ü–µ—Ä–µ–≤–æ–¥—ã —É–ø–∞–∫–æ–≤–∞–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
check_status() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

    python3 translation_helper.py
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    cd "$(dirname "$0")"  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞

    print_header "ü§ñ LLM Batch Translation Pipeline"
    echo "API: $API_URL"
    echo "Model: $MODEL"
    echo ""

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    PREPARE_ONLY=false
    TRANSLATE_ONLY=false
    PACK_ONLY=false
    SKIP_BACKUP=false
    CLI_MODE=true  # CLI —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    SELECTED_FILES=()

    for arg in "$@"; do
        case $arg in
            --prepare-only)
                PREPARE_ONLY=true
                ;;
            --translate-only)
                TRANSLATE_ONLY=true
                ;;
            --pack-only)
                PACK_ONLY=true
                ;;
            --skip-backup)
                SKIP_BACKUP=true
                ;;
            --help)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
                echo ""
                echo "–û–ø—Ü–∏–∏:"
                echo "  --prepare-only    –¢–æ–ª—å–∫–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ JSON"
                echo "  --translate-only  –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ LLM"
                echo "  --pack-only       –¢–æ–ª—å–∫–æ —É–ø–∞–∫–æ–≤–∫–∞ –≤ –∏–≥—Ä—É (JSON->RPY->game/tl/ru)"
                echo "  --skip-backup     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
                echo "  --help            –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                echo ""
                echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
                echo "  LLM_API_URL       URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://127.0.0.1:11434/api/chat)"
                echo "  LLM_MODEL         –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: saiga)"
                echo "  LLM_BACKEND       Backend (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ollama)"
                echo "  LLM_TEMPERATURE   Temperature (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.1)"
                echo "  LLM_TOP_P         Top-p (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.7)"
                exit 0
                ;;
        esac
    done

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    select_files_cli
    echo ""

    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
    if [ "$SKIP_BACKUP" = false ] && [ "$TRANSLATE_ONLY" = false ] && [ "$PREPARE_ONLY" = false ]; then
        backup_modules
        echo ""
    fi

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤
    if [ "$PREPARE_ONLY" = true ]; then
        prepare_modules
    elif [ "$TRANSLATE_ONLY" = true ]; then
        translate_modules
    elif [ "$PACK_ONLY" = true ]; then
        pack_translations
    else
        # –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        prepare_modules
        echo ""

        translate_modules
        echo ""

        pack_translations
        echo ""

        check_status
    fi

    echo ""
    print_header "üéâ –ì–æ—Ç–æ–≤–æ!"
    echo ""
    echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ game/tl/ru/"
    echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: cd .. && ./Ravager.sh"
    echo "3. –í –∏–≥—Ä–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
    echo ""
    echo "üí° –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    echo "   - JSON –ø–µ—Ä–µ–≤–æ–¥—ã: temp_files/llm_json_v2/*_translated.json"
    echo "   - RPY –º–æ–¥—É–ª–∏: translation_modules/*_ru.rpy"
    echo "   - –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã: game/tl/ru/*.rpy"
}

# –ó–∞–ø—É—Å–∫
main "$@"
